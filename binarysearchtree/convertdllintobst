#include <iostream>
#include<queue>
using namespace std;




class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int val){
        this->data = val;
        this->left = NULL;
        this->right = NULL;
    }
};
void levelorder(Node* root){
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        Node* front = q.front();
        q.pop();
        
        if(front==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<front->data<<" ";
            if(front->left!=NULL){
                q.push(front->left);
            }
            if(front->right!=NULL){
                q.push(front->right);
            }
        }
    }
}

Node* convertDLLintoBST(Node* &head,int n){
    if(head==NULL || n<=0){
        return NULL;
    }
     Node* leftsubtree = convertDLLintoBST(head,n/2);
       
       
     Node* root = head;
     root->left = leftsubtree;
     head = head->right;
     
     Node* rightsubtree = convertDLLintoBST(head,n-n/2-1);
     root->right = rightsubtree;
     return root;
     
}
















int main() {
    Node* first = new Node(10);
    Node* second = new Node(20);
    Node* third = new Node(30);
     
     
    first->right = second;
    second->left = first;
    second->right = third;
    third->left = second;
    Node* head = first;
    
    Node* root = convertDLLintoBST(head,3);
    levelorder(root);

    return 0;
}





