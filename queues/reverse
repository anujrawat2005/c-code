#include <iostream>
#include<queue>
using namespace std;

  void reverse(queue<int> &q){
      if(q.empty()){
          return;
          
      }
      int element = q.front();
      q.pop();
      
      reverse(q);
      q.push(element);
 }
 
 

int main() {
    queue<int> q;
    q.push(12);
    q.push(89);
    q.push(86);
    
    reverse(q);
    while(!q.empty()){
        int element = q.front();
        q.pop();
        cout<<element<<" ";
    }
    
    

    return 0;
}



#include <iostream>
#include<queue>
#include<stack>
using namespace std;
void reversek(queue<int> &q,int k){
        stack<int> s;
        int n = q.size();
        if(k>n||k==0){
            return;
        }
        for(int i =0;i<k;i++){
            int temp = q.front();
            q.pop();
            s.push(temp);
        }
        while(!s.empty()){
            int temp = s.top();
            s.pop();
            q.push(temp);
        }
        for(int i =0;i<n-k;i++){
            int temp = q.front();
            q.pop();
            q.push(temp);
        }
    }


int main() {
    queue<int>q;
    q.push(12);
    q.push(15);
    q.push(16);
    q.push(89);
    q.push(867);
    q.push(83);
    reversek(q,3);
    while(!q.empty()){
        int element = q.front();
        q.pop();
        cout<<element<<" ";
    }
    return 0;
}


