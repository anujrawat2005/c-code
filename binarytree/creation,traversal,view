#include <iostream>
#include<queue>
using namespace std;


class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    Node(int val){
        this->data = val;
        this->left = NULL;
        this->right = NULL;
    }
};
Node* createtree(){
    cout<<"enter the value for node:"<<endl;
    int data;
    cin>>data;
    if(data==-1){
        return NULL;
    }
    Node* root = new Node(data);
    root->left = createtree();
    root->right = createtree();
    return root;
}
void preorder(Node* root){
    if(root==NULL){
        return;
    }
    //NLR
    cout<<root->data<<"";
    preorder(root->left);
    preorder(root->right);
}
void inorder(Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void postorder(Node* root){
    if(root==NULL){
        return;
        
    }
    //LRN
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
void levelorder(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    cout<<endl;
    while(q.size()>1){
        Node* front = q.front();
        q.pop();
        if(front==NULL){
            cout<<endl;
            q.push(NULL);
        }
        else{
            cout<<front->data<<" ";
            if(front->left!=NULL){
                q.push(front->left);
            }
            if(front->right!=NULL){
                q.push(front->right);
            }
        }
    }
}

void printleftview(Node* root,int level,vector<int>&leftview){
    if(root==NULL){
        return;
    }
    if(level==leftview.size()){
        leftview.push_back(root->data);
    }
    printleftview(root->left,level+1,leftview);
    printleftview(root->right,level+1,leftview);
}
void printrightview(Node* root,int level,vector<int>&rightview){
    if(root==NULL){
        return;
    }
    if(level==rightview.size()){
        rightview.push_back(root->data);
    }
    printrightview(root->right,level+1,rightview);
    printrightview(root->left,level+1,rightview);
}

void printTopView(Node* root) {
	map<int,int> hdToNodemap;
	queue< pair<Node* , int> > q;
	q.push(make_pair(root, 0));

	while(!q.empty()) {
		pair<Node* ,int> temp = q.front();
		q.pop();

		Node* frontNode = temp.first;
		int hd = temp.second;

		//if there is no entry for hd in map, then create a new entry
		if(hdToNodemap.find(hd) == hdToNodemap.end()) {
			hdToNodemap[hd] = frontNode->data;
		}

		//child ko dekhna h 
		if(frontNode->left != NULL) {
			q.push(make_pair(frontNode->left, hd-1));
		}
		if(frontNode->right != NULL) {
			q.push(make_pair(frontNode->right, hd+1));
		}
		
	}
	cout << "printing top view: " << endl;
	for(auto i: hdToNodemap) {
		cout << i.second << " ";
	}
	
}
int main() {
    
    Node* root = createtree();
    levelorder(root);
    cout<<endl;
    vector<int>rightview;
    printrightview(root,0,rightview);
    for(int i =0;i<rightview.size();i++){
        cout<<rightview[i]<<" ";
    }

    return 0;
}
























