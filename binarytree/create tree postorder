#include <iostream>
#include<queue>
#include<map>
using namespace std;


class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    Node(int val){
        this->data = val;
        this->left = NULL;
        this->right = NULL;
    }
};

void levelorder(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(q.size()>1){
        Node* front = q.front();
        q.pop();
        if(front==NULL){
            cout<<endl;
            q.push(NULL);
        }
        else{
            cout<<front->data<<" ";
            if(front->left!=NULL){
                q.push(front->left);
            }
            if(front->right!=NULL){
                q.push(front->right);
            }
        }
    }
}

void createmapping(int inorder[],int size,map<int,int> &valuetoindexmap){
  for(int i =0;i<size;i++){
      int element  = inorder[i];
      int index = i;
      valuetoindexmap[element] = index;
  }
}

Node* constructInorderandPostorder(map<int,int> &valuetoindexmap,int postorder[],int inorder[],int &postorderIndex,int inorderStart,int inorderEnd,int size){
    if(postorderIndex < 0 || inorderStart>inorderEnd){
        return NULL;
    }
    int element = postorder[postorderIndex];
    postorderIndex--;
    Node* root = new Node(element);
    
    int position = valuetoindexmap[element];
    
   root->right= constructInorderandPostorder(valuetoindexmap,postorder,inorder,postorderIndex,position+1,inorderEnd,size);
   root->left = constructInorderandPostorder(valuetoindexmap,postorder,inorder,postorderIndex,inorderStart,position-1,size);
    return root;
}









































int main() {
    int inorder[6] = {8,14,6,2,10,4};
    int postorder[6] = {8,6,14,4,10,2};
    int size = 6;
    int postorderIndex = size-1;
    int inorderStart = 0;
    int inorderEnd = size-1;
    map<int,int>valuetoindexmap;
    createmapping(inorder,size,valuetoindexmap);
    Node* root = constructInorderandPostorder(valuetoindexmap,postorder,inorder,postorderIndex
    ,inorderStart,inorderEnd,size);
    cout<<"Printing the tree"<<endl;
    levelorder(root);
    
  

    return 0;
}




