bool solve(int src,unordered_map<int,bool> &visited){
    queue<int>q;
    unordered_map<int,int>parent;
    q.push(src);
    visited[src] = true;
    parent[src] = -1;
    while(!q.empty()){
        int frontNode = q.front();
        q.pop();
        
        for(auto nbr:adj[frontNode]){
            if(!visited[nbr]){
                q.push(nbr);
                visited[nbr] = true;
                parent[nbr] = frontNode;
            }
            else if(visited[nbr]==true && nbr!=parent[frontNode]){
                return true;
            }
        }
    }
    return false;
}

bool iscycle(int v,vector<int>adj[]){
    unordered_map<int,bool>visited;
    for(int i= 0;i<v;i++){
        if(!visited[i]){
            bool ans = solve(src,visited);
            if(ans==true){
                return true;
            }
        }
    }
    return false;
};



