#include <iostream>
#include<list>
#include<unordered_map>
using namespace std;





template<typename T>
class graph{
    public:
    unordered_map<T,list<pair<T,int>>>adjList;
    
    void addEdge(T u,T v,int wt,bool direction){
        if(direction==1){
            adjList[u].push_back(make_pair(v,wt));
        }
        else{
            adjList[u].push_back({v,wt});
            adjList[v].push_back({u,wt});
        }
        cout<<"printing list"<<endl;
        for(auto i:adjList){
            cout<<i.first<<":{";
            for(pair<T,int>p:i.second){
                cout<<"{"<<p.first<<","<<p.second<<"}";
            }
            cout<<endl;
        }
    }
    void dfs(T src,unordered_map<T,bool>&vis){
        vis[src]= true;
        cout<<src<<" ";
        
        for(auto nbr :adjList[src]){
            T nbrData = nbr.first;
            
            if(!vis[nbrData]){
                dfs(nbrData,vis);
            }
        }
    }
};




int main() {
    graph<char>g;
    g.addEdge('a','b',5,0);
    g.addEdge('b','c',10,0);
    g.addEdge('c','d',20,0);
    g.addEdge('e','f',30,0);
    
    unordered_map<char,bool>visited;
    for(char node = 'a';node<='f';node++){
        if(!visited[node]){
            g.dfs(node,visited);
        }
    }
    
    
    return 0;
}
