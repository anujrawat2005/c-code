// Online C++ compiler to run C++ program online
#include <iostream>
#include<unordered_map>
#include<queue>
#include<stack>
#include<limits.h>
#include<list>
using namespace std;




class Graph{
    public:
    unordered_map<int,list<pair<int,int>>> adj;
    
    void addEdge(int u,int v,int wt,bool direction){
        if(direction==1){
            adj[u].push_back({v,wt});
        }
        else{
            adj[u].push_back({u,wt});
        }
    }
    void printadj(){
        for(auto i :adj){
            cout<<i.first<<":{";
            for(auto j:i.second){
                cout<<"("<<j.first<<","<<j.second<<"),";
            }
            cout<<endl;
        }
    }
    void topoOrderDfs(int src,stack<int>&topo,unordered_map<int,bool>& visited){
        visited[src] = true;
        for(auto nbrPair:adj[src]){
            int nbrNode = nbrPair.first;
            if(!visited[nbrNode]){
                topoOrderDfs(nbrNode,topo,visited);
            }
        }
        topo.push(src);
    }
    
    void shortestPathDfs(stack<int>& topoOrder,int n){
        vector<int>dist(n,INT_MAX);
        int src = topoOrder.top();
        topoOrder.pop();
        dist[src] = 0;
        
        for(auto nbrpair:adj[src]){
            int nbrNode = nbrpair.first;
            int nbrDist = nbrpair.second;
            if(dist[src]+nbrDist<dist[nbrNode]){
                dist[nbrNode] = dist[src]+nbrDist;
            }
        }
        while(!topoOrder.empty()){
            int src = topoOrder.top();
            topoOrder.pop();
            for(auto nbrpair:adj[src]){
                int  nbrNode = nbrpair.first;
                int nbrDist = nbrpair.second;
                if(dist[src]+nbrDist<dist[nbrNode]){
                    dist[nbrNode] = dist[src]+nbrDist;
                }
            }
        }
        cout<<"printing the topOrder"<<endl;
        for(auto i :dist){
            cout<<i<<" ";
        }
    }
    
    
    
    
    
    
};





















int main() {
    Graph g;
    g.addEdge(0,1,5,1);
    g.addEdge(0,2,3,1);
    g.addEdge(2,3,5,1);
    g.addEdge(1,3,3,1);
    g.addEdge(2,1,2,1);
    g.addEdge(2,4,6,1);
    g.addEdge(4,3,1,1);
    g.printadj();
    
    int src = 0;
    stack<int>topoOrder;
    unordered_map<int,bool>visited;
    g.topoOrderDfs(src,topoOrder,visited);
    int n = 5;
    g.shortestPathDfs(topoOrder,n);
   

    return 0;
}


